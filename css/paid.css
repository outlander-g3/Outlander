.ctPaid {
  width: 335px;
  margin: 20px auto; }
  .ctPaid h2 {
    text-align: center;
    padding-top: 100px;
    font-size: 20px;
    font-weight: bold; }
  .ctPaid > div {
    border: 1px solid #95989a;
    border-radius: 4px; }
    @media only screen and (max-width: 767px) {
      .ctPaid > div {
        border-color: rgba(149, 152, 154, 0.7); } }
    .ctPaid > div p {
      padding: 20px 50px; }
    .ctPaid > div a {
      color: #F99D19; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
