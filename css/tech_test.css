@charset "UTF-8";
body {
  background-color: #F4F4F4; }

.wrap-all {
  width: 100vw;
  max-width: 2500px;
  position: relative;
  top: 60px; }

.banner_pic_b {
  width: 100vw; }
  .banner_pic_b img {
    width: 100%;
    transition: .8s; }

.banner_pic_f {
  width: 100vw; }
  .banner_pic_f img {
    width: 100%;
    transition: .8s;
    position: absolute;
    top: 0; }

.tech_banner_wrap {
  width: 100vw;
  max-width: 2500px;
  text-align: center;
  position: relative; }

@media screen and (max-width: 991px) {
  .cont {
    width: 95vw;
    padding: 0 2.5vw 0 2.5vw; } }

@media screen and (min-width: 992px) {
  .cont {
    width: 40vw; } }

.cont h1 {
  line-height: 1.6;
  font-size: 2.2rem;
  color: #088B9A;
  font-family: "微軟正黑體"; }
  @media screen and (max-width: 767px) {
    .cont h1 {
      font-size: 1.8rem; } }

.cont h2 {
  line-height: 1.6;
  font-size: 2rem;
  font-weight: normal;
  color: #F27F22;
  font-family: "微軟正黑體"; }
  @media screen and (max-width: 767px) {
    .cont h2 {
      font-size: 1.2rem; } }

.cont p {
  font-size: 1.2rem;
  line-height: 1.6;
  color: #484848;
  font-family: "微軟正黑體"; }
  @media screen and (max-width: 767px) {
    .cont p {
      font-size: 1rem; } }

#cont_a {
  padding-top: 17vh; }
  @media screen and (min-width: 992px) {
    #cont_a {
      padding-top: 30vh; } }

@media screen and (max-width: 991px) {
  .pic-main {
    width: 95vw; } }

@media screen and (min-width: 992px) {
  .pic-main {
    width: 60vw; } }

.pic-main img {
  width: 100%; }

@media screen and (max-width: 992px) {
  .wrap-cloud {
    display: none; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
